begin; start transaction; //开启数据库事务
rollback; commit; //回滚或者提交事务
show variables like "autocommit"; //查看autocommit参数的值
set session autocommit on/off; //开启、关闭数据库事务自动提交 session层

事务并发会产生的问题：
脏读：一个事务读取到了另外一个未提交事务的数据
不可重复读：在一个事务中读取到其它事务提交的数据导致多次读取到的数据不一致（由于update或者delete）
幻读：由于其它事务插入了数据导致事务多次查询到的数据不一致（由于insert）

隔离级别：
read uncommitted(未提交读)：事物未提交的数据对其它事务也是可见的，会出现脏读
read committed(已提交读)：一个事务开始之后，只能看到已提交事务所做的修改，会出现不可重复读
repeatable read(可重复读)：在同一个事务中多次读取同样的数据得到的结果是一样的，这种隔离级别未定义解决幻读的问题
serializable(串行化)：最高的隔离级别，通过强制的事务的串行执行，能够解决所有的并非事务问题

事务隔离级别的实现：
1.在读取数据之前，对其加锁，阻止其它事务对数据进行修改（LBCC，lock based concurrency control）
2.生成一个数据请求时间点的一致性数据快照，并用这个快照来提供一定级别（语句级或者事务级）的一致性读取（MVCC，multi version concurrency control）

锁；用于关于不同事务对共享资源的并发访问
表锁和行锁的区别：
锁定粒度：表锁>行锁
加锁效率：表锁>行锁
冲突概率：表锁>行锁
并发性能：表锁<行锁

MyISAM支持表锁
InnoDB分别支持表锁和行锁

Mysql InnoDB锁的类型：
1.共享锁（行锁）：Shared Locks，又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改
加锁和解锁的方式：
select * from students where id=1 lock in share mode;
commit/rollback;
2.排它锁（行锁）：Exclusive Locks，又称为写锁，简称X锁，排它锁不能与其它锁并存，如一个事务获取了一个数据行的排它锁，其它事务就不能再获取该行的锁（共享锁，排它锁），只有该获取了排它锁的事务是可以对数据进行读取和修改
加锁和解锁的方式：
自动：delete/update/insert 默认加上X锁
手动：select * from students where id=1 for update;
commit/rollback;
3.意向共享锁（表锁）：Intention Shared Locks，表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须先取得该表的IS锁
4.意向排它锁（表锁）：Intention Exclusive Locks，表示事务准备给数据行加入排它锁，也就是说一个数据行加排他锁前必须先取得该表的IX锁

注意：一个事务能给一张表成功加上表锁的前提是没有其它任何一个事务锁定了其中这张表的任意一行，表锁可以提高效率

行锁算法：
记录锁 Record Locks，唯一性索引（唯一/主键）等值查询，精确匹配，从Gap Locks退化成记录锁
间隙锁 Gap Locks，锁定范围，当记录不存在时，会从临键锁降成间隙锁，gap锁之间不冲突，可以获取同一个间隙锁，这是与排它锁的区别
临键锁 Next-key Locks，InnoDB默认的行锁算法，范围查询的时候为了解决幻读的问题
间隙锁和临键锁锁定范围是为了解决幻读的问题

锁的原理：
1.给一个数据加排它锁时没有命中索引就会锁住整张表
2.锁住的对象是索引
