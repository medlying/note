/*
Navicat MySQL Data Transfer

Source Server         : 本地数据库
Source Server Version : 50717
Source Host           : localhost:44444
Source Database       : st-kaar

Target Server Type    : MYSQL
Target Server Version : 50717
File Encoding         : 65001

Date: 2018-09-12 18:00:13
*/

-- ----------------------------
-- Procedure structure for CITIES
-- ----------------------------
DROP PROCEDURE IF EXISTS `CITIES`;
DELIMITER ;;
CREATE  PROCEDURE `CITIES`()
BEGIN
	#Routine body goes here...
	DELETE FROM CITIES WHERE `NAME` = 't-重庆';
  INSERT INTO `c2g-kaar`.`CITIES` 
			(`UUID`, `NAME`, `EN_NAME`, `LONGITUDE`, `LATITUDE`, `CREATED_AT`, `UPDATED_AT`, `ENABLED`, `CODE`, `SOURCE_FROM`, `SOURCE_ID`, `PRODUCT`)
				VALUES 
			UNHEX('11E82B226166FE98A90C0017FA00C2E9'), 't-重庆','t-Chongqing' , '106.5507', '29.5647', NOW(), NOW(), '1', 'CHQ', NULL, NULL, 'CAR2GO');

insert into `c2g-kaar`.`PRICE_LEVELS` ( `LEVEL`, `DESCRIPTION`, `EN_DESCRIPTION`, `IMAGES`, `ENABLED`) values ( 'A', 'Benz SMART fortwo 0.9T', 'EN Benz SMART fortwo 0.9T', null, '1');
insert into `c2g-kaar`.`PRICE_LEVELS` ( `LEVEL`, `DESCRIPTION`, `EN_DESCRIPTION`, `IMAGES`, `ENABLED`) values ( 'B', 'Benz SMART forjeremy 1.1T', 'EN Benz SMART forjeremy 1.1T', null, '1');
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for COMPANIES
-- ----------------------------
DROP PROCEDURE IF EXISTS `COMPANIES`;
DELIMITER ;;
CREATE  PROCEDURE `COMPANIES`()
BEGIN
	#Routine body goes here...
DELETE FROM COMPANIES WHERE `FULL_NAME` = 't-car2go重庆';
INSERT INTO `c2g-kaar`.`COMPANIES` (`UUID`, `FULL_NAME`, `SHORT_NAME`, `EN_FULL_NAME`, `EN_SHORT_NAME`, `OPERATION_PARTNER`, `VEHICLE_OWNER`, `VEHICLE_OPERATION_VENDOR`, `COMPANY_CUSTOMER`, `NATURE`, `EMAIL_SUFFIX`, `CREATED_BY`, `CREATED_AT`, `RENTAL_AGREEMENT`, `CODE`, `STATUS`, `SOURCE_FROM`, `SOURCE_ID`)
 VALUES 
(ORDERED_UUID(UUID()), 't-car2go重庆', 't-car2go CQ', 'car2go Chongqing', 'car2go CQ', '1', '1', '1', '1', 'COMPANY', '|Daimler.com|', 'SYSTEM', NOW(), NULL, 'own', 'ACTIVE', NULL, NULL);

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for STATIONS
-- ----------------------------
DROP PROCEDURE IF EXISTS `STATIONS`;
DELIMITER ;;
CREATE  PROCEDURE `STATIONS`()
BEGIN
	#Routine body goes here...
	DECLARE CITY_ID BINARY(16);
	
	DELETE FROM STATIONS WHERE CH_NAME = '测试-站点A';

	SET CITY_ID = (SELECT UUID FROM CITIES LIMIT 1);
	INSERT INTO `c2g-kaar`.`STATIONS` 
(`UUID`, `CH_NAME`, `EN_NAME`, `PROVINCE`, `CITY`, `AREA`, `CH_ADDRESS`, `EN_ADDRESS`, `LOCATION_COORDINATES`, `LOCATION_RADIUS`, `FENCE`, `CITY_ID`, `DECORATION_LEVEL`, `PARKING_METHOD`, `NETWORK`, `FIXED_ASSETS`, `FIXED_ASSETS_NUMBER`, `PARKING_LOTS_LOCATION`, `TRAFFIC_RESTRICTION`, `IMAGES`, `TYPE`, `CREATED_AT`, `ENABLED`, `STATUS`, `SOURCE_FROM`, `SOURCE_ID`, `TOTAL_PARKING_SPACE_COUNT`, `OCCUPIED_PARKING_SPACE_COUNT`, `BOOKED_PARKING_SPACE_COUNT`) 
VALUES 
(ORDERED_UUID(UUID()), '测试-站点A', 'test station A', NULL, NULL, NULL, '测试-站点A-地址', 'test station address', GeomFromText('POINT(106.549563 29.55522)'), '500', '[[106.546859,29.560932],[106.560936,29.557049],[106.545229,29.552868]]', CITY_ID, 'HIGH', 'PARKING_CARD', '[\"WIFI\"]', '1', '10000', NULL, '1', '[]', 'AIRPORT', NOW(), '1', 'OPENED', NULL, NULL, '2', '0', '0');
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for VEHICLES
-- ----------------------------
DROP PROCEDURE IF EXISTS `VEHICLES`;
DELIMITER ;;
CREATE  PROCEDURE `VEHICLES`(IN `total` int)
BEGIN
  -- 准备城市数据
	DECLARE CITY_ID BINARY(16);
	DECLARE MODEL_ID BINARY(16);
	DECLARE ZONE_ID BINARY(16);
	DECLARE COMPANY_ID BINARY(16);
	DECLARE VEHICLE_ID BINARY(16);
	DECLARE PLATE_NUM VARCHAR(7);
	DECLARE I INT(1);

	DELETE FROM VEHICLES WHERE LICENSE_PLATE_NUMBER LIKE '川T%';
	DELETE FROM TBOXS WHERE VEHICLE_LICENSE_PLATE_NUMBER LIKE '川T%';
	CALL VEHICLE_MODELS();
	CALL CITIES();
	CALL STATIONS();
	CALL COMPANIES();
	CALL ZONES();
	#Routine body goes here...

	SET CITY_ID = (SELECT UUID   FROM CITIES LIMIT 1);
	SET COMPANY_ID = (SELECT UUID   FROM COMPANIES LIMIT 1);
  SET MODEL_ID = (SELECT UUID FROM VEHICLE_MODELS LIMIT 1);
  SET ZONE_ID = (SELECT UUID FROM ZONES LIMIT 1);
	SET I = 0;
	WHILE I < total do
		SET PLATE_NUM = PLATE_NUM();
		WHILE (SELECT COUNT(1) FROM VEHICLES WHERE LICENSE_PLATE_NUMBER LIKE CONCAT('%',PLATE_NUM)) > 0 do
		SET	PLATE_NUM = PLATE_NUM();
		END WHILE;
		SET VEHICLE_ID = ORDERED_UUID(UUID());
		
		INSERT INTO `c2g-kaar`.`TBOXS` 
		(`UUID`, `SERIAL_NUMBER`, `PROVIDER`, `TYPE`, `SIM_CARD`, `VEHICLE_ID`, `VEHICLE_LICENSE_PLATE_NUMBER`, `CREATED_AT`, `STATUS`, `ENABLED`, `SOURCE_FROM`, `SOURCE_ID`) 
		VALUES 
		(ORDERED_UUID(UUID()), CONCAT('sodacartestQ100',I), 'Xtool', 'TCP', 'CHINA_UNICOM_3G', VEHICLE_ID, CONCAT('川T',PLATE_NUM), '2017-12-13 10:54:34.235278', 'BIND', '1', NULL, NULL);

		INSERT INTO `c2g-kaar`.`VEHICLES` 
	 (`UUID`, `REGISTER_AT`, `COLOR`, `VIN`, `ENGINE_NUMBER`, `CITY_ID`, `MODEL_ID`, `FLEET_ID`, `LICENSE_PLATE_NUMBER`, `PREVIOUS_LICENSE_PLATE_NUMBER`, `TBOX_SERIAL_NUMBER`, `PREVIOUS_TBOX_SERIAL_NUMBER`, `OWNER`, `OPERATION_VENDOR`, `OPERATION_PARTNER`, `OPERATION_MODE_TYPE`, `OPERATION_MODE_STATION`, `OPERATION_STATE`, `STATUS`, `CREATED_AT`, `LAST_INSPECTED_AT`, `NEXT_INSPECT_AT`, `LAST_MAINTAINED_AT`, `TRAFFIC_RESTRICTION_MODE`, `TRAFFIC_RESTRICTION_INDICATOR`, `ENABLED`, `LEVEL`, `USED_BY`, `LEASE_START_AT`, `LEASE_END_AT`, `SOURCE_FROM`, `SOURCE_ID`, `ZONE_ID`, `SERIAL_NUMBER`, `STATUS_DESCRIPTION`)
		VALUES
	 (VEHICLE_ID, NOW(), 'red', CONCAT('sodacartestQ100',I), CONCAT('sodacartestQ100',I), CITY_ID, MODEL_ID, NULL, CONCAT('川T',PLATE_NUM), NULL, CONCAT('sodacartestQ100',I), NULL, COMPANY_ID, COMPANY_ID, COMPANY_ID, 'FREE_FLOATING', NULL, 'ONSHELVE', 'IN_USE', now(), now(),now(), now(), 'LAST_NUMBER', '3', '1', 'A', 'CUSTOMER', now(), NULL, NULL, NULL, ZONE_ID, NULL, NULL);
		SET I = I + 1;
	END WHILE;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for VEHICLE_MODELS
-- ----------------------------
DROP PROCEDURE IF EXISTS `VEHICLE_MODELS`;
DELIMITER ;;
CREATE  PROCEDURE `VEHICLE_MODELS`()
BEGIN
	#Routine body goes here...
	DELETE FROM VEHICLE_MODELS WHERE `BRAND` = 't-Benz';
	INSERT INTO `c2g-kaar`.`VEHICLE_MODELS` 
(`UUID`, `BRAND`, `MODEL`, `MODEL_YEAR`, `CLASS`, `TYPE`, `ENGINE_TYPE`, `FUEL_CONSUMPTION`, `FUEL_NUMBER`, `CAPACITY`, `FUEL_TANK_CAPACITY`, `IMAGES`, `BATTERY_MILEAGE`, `CREATED_AT`, `ENABLED`, `USAGE_URL`, `SOURCE_FROM`, `SOURCE_ID`, `KEY_IMAGES`) 
VALUES 
(ORDERED_UUID(UUID()), 't-Benz', 't-SMART FOR FOUR', '2017', 'B', 'GASOLINE', '1.4', '20.00', '#92', '4', '140.00', '[\"https://sodanext.blob.core.chinacloudapi.cn/vehicle-model/2c0b80498a7e4dbfb95d0ceaf33cfec4.png\"]', NULL, NOW(), '1', NULL, NULL, NULL, '[\"https://sodanext.blob.core.chinacloudapi.cn/vehicle-model/f421277e848744d5bf12b702b8640a38.jpeg\"]');

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for ZONES
-- ----------------------------
DROP PROCEDURE IF EXISTS `ZONES`;
DELIMITER ;;
CREATE  PROCEDURE `ZONES`()
BEGIN
	#Routine body goes here...
DECLARE CITY_ID BINARY(16);
SET CITY_ID = (SELECT UUID FROM CITIES LIMIT 1);
INSERT INTO `c2g-kaar`.`ZONES` 
(`UUID`, `CH_NAME`, `EN_NAME`, `FENCE`, `CITY_ID`, `TYPE`, `COORDINATES`, `CAPACITY`, `CREATED_AT`, `CHARGING_POLE`, `ACTIVE`, `VISIBLE`, `ENABLED`, `OCCUPIED_COUNT`)
 VALUES 
(ORDERED_UUID(UUID()), '重庆江北国际机场', NULL, '[[83.182099,47.364632],[132.57663,51.258254],[118.51413,25.279148],[79.490692,23.518336]]',CITY_ID, 'EXCLUDE', NULL, NULL, NOW(), '1', '1', '1', '1', '0');
END
;;
DELIMITER ;


-- ----------------------------
-- Function structure for PLATE_NUM
-- ----------------------------
DROP FUNCTION IF EXISTS `PLATE_NUM`;
DELIMITER ;;
CREATE  FUNCTION `PLATE_NUM`() RETURNS varchar(5) CHARSET utf8 COLLATE utf8_unicode_ci
BEGIN
	#Routine body goes here...
	
	DECLARE PLATE_NUM VARCHAR(5);
	DECLARE I INT(5);
	DECLARE C VARCHAR(1);
	DECLARE EXIST INT(1);
	SET PLATE_NUM = '';
	SET I = 0;
	WHILE I < 5 DO
	SET C = (SELECT SUBSTR('ABCDEFGHIJKLMNOPQRSTUVWXYX0123456789',FLOOR(1 + RAND() * (36 - 2)),1));
	SET PLATE_NUM = CONCAT(PLATE_NUM,C);
	SET	I = I + 1;
	END WHILE;
	RETURN PLATE_NUM;
END
;;
DELIMITER ;
